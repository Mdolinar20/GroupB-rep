@using System; 
@using Google.Apis.Auth.OAuth2;
@using Google.Apis.Calendar.v3;
@using Google.Apis.Calendar.v3.Data;
@using Google.Apis.Services;
@using Google.Apis.Util.Store;
@using System.Collections.Generic;
@using System.IO;
@using System.Threading;

@*@functions{

    //if google imports are broken use nuGet package manager and call 'Install-Package Google.Apis.Calendar.v3'
    String GetCalendarService()
    {
        try
        {
            string[] Scopes = {
                    CalendarService.Scope.Calendar,
                    CalendarService.Scope.CalendarEvents,
                    CalendarService.Scope.CalendarEventsReadonly
                };

            UserCredential credential;

            using (var stream = new FileStream("GoogleApi/credentials.json", FileMode.Open, FileAccess.Read))
            {
                // The file token.json stores the user's access and refresh tokens, and is created
                // automatically when the authorization flow completes for the first time.
                string credPath = "token.json";
                credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.FromStream(stream).Secrets,
                    Scopes,
                    "user",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
                Console.WriteLine("Credential file saved to: " + credPath);
            }

            // Create Calendar API service.
            var service = new CalendarService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = credential,
                ApplicationName = "GroupB_Project",
            });


            // Define parameters of request.
            EventsResource.ListRequest request = service.Events.List("primary");
            request.TimeMin = DateTime.Now;
            request.ShowDeleted = false;
            request.SingleEvents = true;
            request.MaxResults = 10;
            request.OrderBy = EventsResource.ListRequest.OrderByEnum.StartTime;

            string eventsValue = "";
            // List events.
            Events events = request.Execute();
            eventsValue = "Upcoming events:\n";
            if (events.Items != null && events.Items.Count > 0)
            {
                foreach (var eventItem in events.Items)
                {
                    string when = eventItem.Start.DateTime.ToString();
                    if (String.IsNullOrEmpty(when))
                    {
                        when = eventItem.Start.Date;
                    }
                    eventsValue += string.Format("{0} ({1})", eventItem.Summary, when) + "\n";
                }
                return eventsValue;
            }
            else
            {
                return"No upcoming events found.";
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }*@

    @{
        ViewData["Title"] = "Home Page";
        <div class="main">
            <div class="main__container">
                <main role="main" class="pb-3">

                </main>
                <div class="main__content">
                    <h1>POMODORO</h1>
                    <h2>Get Back Your Time</h2>
                    <p>See how time blocking works!</p>
                   
                    <button class="main__btn">
                        <a href="/">Get Started</a>
                    </button>
                </div>
                <div class="main__img--container">
                    <img src="https://images.pexels.com/photos/9880350/pexels-photo-9880350.png?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260" alt="pic" id="main__img">
                </div>
            </div>
        </div>
    }

    @*<div class="text-center">
            <h1 class="display-4">Welcome</h1>

            <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
        </div>*@

